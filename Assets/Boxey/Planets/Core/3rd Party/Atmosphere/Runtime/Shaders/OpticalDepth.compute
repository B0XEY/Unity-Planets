#pragma kernel Main
#include "/Includes/Math.hlsl"


RWTexture2D<float4> _Result;

int _TextureSize;
int _NumOutScatteringSteps;

float _PlanetRadius;
float _AtmosphereRadius;

float _RayleighFalloff;
float _MieFalloff;
float _HeightAbsorbtion;



float3 DensityAtPoint(float2 position)
{
    float height = length(position) - _PlanetRadius;
    float height01 = height / (_AtmosphereRadius - _PlanetRadius);

    float2 scaleHeight = float2(_RayleighFalloff, _MieFalloff);

    float3 density = float3(exp(-height01 * scaleHeight) * (1 - height01), 0.0);

    float denom = (_HeightAbsorbtion + height01);
    density.z = (1.0 / (denom * denom + 1.0)) * density.x;

    density.z = saturate(density.z);

    return density;
}


[numthreads(8, 8, 1)]
void Main(uint2 id : SV_DispatchThreadID)
{
	float2 uv = id / (float)_TextureSize;
	float height01 = uv.y;

	float y = -2 * uv.x + 1;
	float x = sin(acos(y));
	float2 dir = float2(x, y);
	
	float2 inPoint = float2(0, lerp(_PlanetRadius, _AtmosphereRadius, height01));

    float dstThroughAtmosphere = RaySphere(0, _AtmosphereRadius, float3(inPoint, 0), float3(dir, 0)).y;

    inPoint = inPoint + dir * 0.0001;

	float stepSize = dstThroughAtmosphere / (_NumOutScatteringSteps - 1);
	float3 outScattering = 0;

	for (int i = 0; i < _NumOutScatteringSteps; i ++) {
		float3 localDensity = DensityAtPoint(inPoint);

		outScattering += localDensity * stepSize;

		inPoint += dir * stepSize;
	}

	_Result[id.xy] = float4(outScattering.xyz, 0);
}